//JSI Command Prototypes: version 1.1.1
throw("DO NOT EXECUTE: LEAVING THIS FILE OPEN IN GEANY IS USEFUL FOR CMD LINE COMPLETION + GOTO TAG");

var Array = function(cmd,args) {};
Array.prototype.concat = function(arr,arr,...) {};
Array.prototype.filter = function(callback,this) {};
Array.prototype.forEach = function(function,this) {};
Array.prototype.indexOf = function(str,startIdx) {};
Array.prototype.isArray = function() {};
Array.prototype.join = function(char) {};
Array.prototype.lastIndexOf = function(seq,start) {};
Array.prototype.map = function(callback,this) {};
Array.prototype.pop = function() {};
Array.prototype.push = function(val,val,...) {};
Array.prototype.reverse = function() {};
Array.prototype.shift = function() {};
Array.prototype.sizeOf = function() {};
Array.prototype.slice = function(start,end) {};
Array.prototype.some = function(function,this) {};
Array.prototype.sort = function(comparefunc) {};
Array.prototype.splice = function(start,howmany,val,val,...) {};
Array.prototype.unshift = function(arg,arg...) {};
var Boolean = function(cmd,args) {};
var File = function(cmd,args) {};
File.prototype.close = function() {};
File.prototype.eof = function() {};
File.prototype.filename = function() {};
File.prototype.flush = function() {};
File.prototype.gets = function() {};
File.prototype.lstat = function() {};
File.prototype.mode = function() {};
File.prototype.open = function(file,mode) {};
File.prototype.puts = function(str) {};
File.prototype.read = function(size) {};
File.prototype.seek = function(pos,whence) {};
File.prototype.stat = function() {};
File.prototype.tell = function() {};
File.prototype.truncate = function(pos) {};
File.prototype.write = function(data) {};
var Function = function(cmd,args) {};
Function.prototype.apply = function(thisArg,argArray) {};
Function.prototype.call = function(thisArg,arg1,arg2,...) {};
var Interp = function(cmd,args) {};
Interp.prototype.alias = function(name,func,args) {};
Interp.prototype.call = function(funcName,args,async) {};
Interp.prototype.conf = function(string_options) {};
Interp.prototype.eval = function(js,async) {};
Interp.prototype.info = function() {};
Interp.prototype.send = function(msg) {};
var JSON = function(cmd,args) {};
JSON.prototype.check = function(str,strict) {};
JSON.prototype.parse = function(str) {};
JSON.prototype.parseNS = function(str) {};
JSON.prototype.stringify = function(object) {};
JSON.prototype.stringifyNS = function(object) {};
var Math = function(cmd,args) {};
Math.prototype.abs = function(num) {};
Math.prototype.acos = function(num) {};
Math.prototype.asin = function(num) {};
Math.prototype.atan = function(num) {};
Math.prototype.atan2 = function(x,y) {};
Math.prototype.ceil = function(num) {};
Math.prototype.cos = function(num) {};
Math.prototype.exp = function(num) {};
Math.prototype.floor = function(num) {};
Math.prototype.log = function(num) {};
Math.prototype.max = function(x,y,z,...,n) {};
Math.prototype.min = function(x,y,z,...,n) {};
Math.prototype.pow = function(x,y) {};
Math.prototype.random = function() {};
Math.prototype.round = function(num) {};
Math.prototype.sin = function(num) {};
Math.prototype.sqrt = function(num) {};
Math.prototype.tan = function(num) {};
var Number = function(cmd,args) {};
Number.prototype.toExponential = function(num) {};
Number.prototype.toFixed = function(num) {};
Number.prototype.toPrecision = function(num) {};
Number.prototype.toString = function(radix) {};
var Object = function(cmd,args) {};
Object.prototype.bind = function(thisArg,arg,arg,...) {};
Object.prototype.create = function(proto,properties) {};
Object.prototype.getPrototypeOf = function(name) {};
Object.prototype.hasOwnProperty = function(name) {};
Object.prototype.isPrototypeOf = function(name) {};
Object.prototype.keys = function() {};
Object.prototype.propertyIsEnumerable = function(name) {};
Object.prototype.toLocaleString = function(quoteflag) {};
Object.prototype.toString = function(quoteflag) {};
Object.prototype.valueOf = function() {};
var RegExp = function(cmd,args) {};
RegExp.prototype.exec = function(string) {};
RegExp.prototype.test = function(string) {};
var Sqlite = function(cmd,args) {};
Sqlite.prototype.authorizor = function(func) {};
Sqlite.prototype.backup = function(file,dbname) {};
Sqlite.prototype.busy = function(func) {};
Sqlite.prototype.cache_flush = function() {};
Sqlite.prototype.cache_size = function(size) {};
Sqlite.prototype.changes = function() {};
Sqlite.prototype.close = function() {};
Sqlite.prototype.collate = function(name,func) {};
Sqlite.prototype.collation_needed = function(func) {};
Sqlite.prototype.commit_hook = function(func) {};
Sqlite.prototype.complete = function(sql) {};
Sqlite.prototype.conf = function(string_options) {};
Sqlite.prototype.enable_load_extension = function(bool) {};
Sqlite.prototype.errorcode = function() {};
Sqlite.prototype.evaluate = function(sql) {};
Sqlite.prototype.exec = function(sql,func_options) {};
Sqlite.prototype.exists = function(sql) {};
Sqlite.prototype.filename = function(name) {};
Sqlite.prototype.func = function(name,func,numArgs) {};
Sqlite.prototype.import = function(table,file,options) {};
Sqlite.prototype.interrupt = function() {};
Sqlite.prototype.last_insert_rowid = function() {};
Sqlite.prototype.onecolumn = function(sql) {};
Sqlite.prototype.profile = function(func) {};
Sqlite.prototype.progress = function(N,func) {};
Sqlite.prototype.rekey = function(key) {};
Sqlite.prototype.restore = function(file,dbname) {};
Sqlite.prototype.rollback_hook = function(func) {};
Sqlite.prototype.status = function('steps'_'sorts') {};
Sqlite.prototype.timeout = function(milliseconds) {};
Sqlite.prototype.total_changes = function() {};
Sqlite.prototype.trace = function(func) {};
Sqlite.prototype.transaction = function(func,type) {};
Sqlite.prototype.unlock_notify = function(func) {};
Sqlite.prototype.update_hook = function(func) {};
Sqlite.prototype.version = function() {};
Sqlite.prototype.wal_hook = function(func) {};
var String = function(cmd,args) {};
String.prototype.charAt = function(index) {};
String.prototype.charCodeAt = function(index) {};
String.prototype.concat = function(str,str,...) {};
String.prototype.fromCharCode = function(code) {};
String.prototype.indexOf = function(str,start) {};
String.prototype.lastIndexOf = function(str,start) {};
String.prototype.match = function(pattern) {};
String.prototype.replace = function(pattern,replace) {};
String.prototype.search = function(pattern) {};
String.prototype.slice = function(start,end) {};
String.prototype.split = function(char) {};
String.prototype.substr = function(start,length) {};
String.prototype.substring = function(start,length) {};
String.prototype.toLocaleLowerCase = function() {};
String.prototype.toLocaleUpperCase = function() {};
String.prototype.toLowerCase = function() {};
String.prototype.toTitle = function(chars) {};
String.prototype.toUpperCase = function() {};
String.prototype.trim = function(chars) {};
String.prototype.trimLeft = function(chars) {};
String.prototype.trimRight = function(chars) {};
var Websocket = function(cmd,args) {};
Websocket.prototype.conf = function(string_options) {};
Websocket.prototype.handler = function(ext,cmd) {};
Websocket.prototype.send = function(data,id) {};
Websocket.prototype.update = function(callback) {};
var assert = function(expr,value) {};
var cdata = function(cmd,args) {};
cdata.prototype.get = function(name,index,field) {};
cdata.prototype.info = function(name) {};
cdata.prototype.names = function(Return name of all defined cdata items) {};
cdata.prototype.schema = function(name) {};
cdata.prototype.set = function(name,index,dataobj,) {};
cdata.prototype.size = function(name) {};
var clearInterval = function(id) {};
var console = function(cmd,args) {};
console.prototype.input = function() {};
console.prototype.log = function(val,val,...) {};
var decodeURI = function(string) {};
var encodeURI = function(string) {};
var exit = function(code) {};
var file = function(cmd,args) {};
file.prototype.atime = function(file) {};
file.prototype.chdir = function(file) {};
file.prototype.chmod = function(file,mode) {};
file.prototype.copy = function(src,dest,forcebool) {};
file.prototype.dirname = function(file) {};
file.prototype.executable = function(file) {};
file.prototype.exists = function(file) {};
file.prototype.extension = function(file) {};
file.prototype.glob = function(pattern,dir_bool_options) {};
file.prototype.isdir = function(file) {};
file.prototype.isfile = function(file) {};
file.prototype.join = function(path,path) {};
file.prototype.link = function(src,dest,hardbool) {};
file.prototype.lstat = function(file) {};
file.prototype.mkdir = function(file) {};
file.prototype.mtime = function(file) {};
file.prototype.owned = function(file) {};
file.prototype.pwd = function() {};
file.prototype.read = function(file,mode) {};
file.prototype.readable = function(file) {};
file.prototype.readlink = function(file) {};
file.prototype.realpath = function(file) {};
file.prototype.remove = function(file,forcebool) {};
file.prototype.rename = function(src,dest,forcebool) {};
file.prototype.rootname = function(file) {};
file.prototype.size = function(file) {};
file.prototype.stat = function(file) {};
file.prototype.tail = function(file) {};
file.prototype.tempfile = function(file) {};
file.prototype.truncate = function(file,size) {};
file.prototype.type = function(file) {};
file.prototype.writable = function(file) {};
file.prototype.write = function(file,str,mode) {};
var info = function(cmd,args) {};
info.prototype.argv0 = function() {};
info.prototype.cmds = function(string_pattern ,all) {};
info.prototype.data = function(string_pattern_obj) {};
info.prototype.error = function() {};
info.prototype.event = function(id) {};
info.prototype.execZip = function() {};
info.prototype.executable = function() {};
info.prototype.funcs = function(string_pattern_obj) {};
info.prototype.interp = function(interp) {};
info.prototype.isInvoked = function() {};
info.prototype.keywords = function() {};
info.prototype.lookup = function(string) {};
info.prototype.named = function(name) {};
info.prototype.platform = function() {};
info.prototype.script = function(function) {};
info.prototype.scriptDir = function() {};
info.prototype.vars = function(string_pattern_obj) {};
info.prototype.version = function(true) {};
var isFinite = function(string) {};
var isNaN = function(string) {};
var load = function(shlib.so) {};
var parseFloat = function(string) {};
var parseInt = function(string,base) {};
var puts = function(val,val,..) {};
var quote = function(string) {};
var setInterval = function(function,millisecs) {};
var setTimeout = function(function,millisecs) {};
var signal = function(cmd,args) {};
signal.prototype.alarm = function(secs) {};
signal.prototype.callback = function(func,sig) {};
signal.prototype.default = function(sig,sig,...) {};
signal.prototype.handle = function(sig,sig,...) {};
signal.prototype.ignore = function(sig,sig,...) {};
signal.prototype.kill = function(pid,sig) {};
signal.prototype.names = function() {};
var source = function(file.js_array ,options) {};
var sprintf = function(format,arg,arg) {};
var sys = function(cmd,args) {};
sys.prototype.b64decode = function(string,isfile) {};
sys.prototype.b64encode = function(string,isfile) {};
sys.prototype.exec = function(cmd,errout) {};
sys.prototype.getenv = function(name) {};
sys.prototype.getpid = function() {};
sys.prototype.getppid = function() {};
sys.prototype.md5 = function(string,isfile) {};
sys.prototype.noOp = function() {};
sys.prototype.now = function() {};
sys.prototype.setenv = function(name,string) {};
sys.prototype.sha1 = function(string,isfile) {};
sys.prototype.sleep = function(secs) {};
sys.prototype.strftime = function(num,format_options) {};
sys.prototype.strptime = function(string,format_options) {};
sys.prototype.times = function(function,count) {};
sys.prototype.update = function(minTime_options) {};
var zvfs = function(cmd,args) {};
zvfs.prototype.append = function(archive,filelist,path,filelist,path,...) {};
zvfs.prototype.create = function(archive,filelist,path,filelist,path,...) {};
zvfs.prototype.info = function(mount) {};
zvfs.prototype.list = function(archive) {};
zvfs.prototype.mount = function(archive,mount) {};
zvfs.prototype.offset = function(archive) {};
zvfs.prototype.stat = function(filename) {};
zvfs.prototype.truncate = function(archive,noerror) {};
zvfs.prototype.unmount = function(archive) {};

