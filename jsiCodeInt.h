static OpCodes *codes_new(int size);
static OpCodes *codes_join(OpCodes *a, OpCodes *b);
static OpCodes *codes_join3(OpCodes *a, OpCodes *b, OpCodes *c);
static OpCodes *codes_join4(OpCodes *a, OpCodes *b, OpCodes *c, OpCodes *d);
static OpCodes *code_push_undef();
static OpCodes *code_push_bool(int v);
static OpCodes *code_push_num(Jsi_Number *v);
static OpCodes *code_push_string(jsi_Pstate *p, jsi_Pline *line, const char *str);
static OpCodes *code_push_index(jsi_Pstate *p, jsi_Pline *line, char *varname);
static OpCodes *code_push_this(jsi_Pstate *p, jsi_Pline *line);
static OpCodes *code_push_top();
static OpCodes *code_push_top2() ;
static OpCodes *code_unref() ;
static OpCodes *code_push_args() ;
static OpCodes *code_push_func(jsi_Pstate *p, jsi_Pline *line, struct Jsi_Func *fun) ;
static OpCodes *code_push_regex(jsi_Pstate *p, jsi_Pline *line, Jsi_Regex *reg) ;
static OpCodes *code_local(jsi_Pstate *p, jsi_Pline *line, const char *varname) ;
static OpCodes *code_nop() ;
static OpCodes *code_neg() ;
static OpCodes *code_pos() ;
static OpCodes *code_bnot() ;
static OpCodes *code_not() ;
static OpCodes *code_mul() ;
static OpCodes *code_div() ;
static OpCodes *code_mod() ;
static OpCodes *code_add() ;
static OpCodes *code_sub() ;
static OpCodes *code_in() ;
static OpCodes *code_less() ;
static OpCodes *code_greater() ;
static OpCodes *code_lessequ() ;
static OpCodes *code_greaterequ() ;
static OpCodes *code_equal() ;
static OpCodes *code_notequal() ;
static OpCodes *code_eequ() ;
static OpCodes *code_nneq() ;
static OpCodes *code_band() ;
static OpCodes *code_bor() ;
static OpCodes *code_bxor() ;
static OpCodes *code_shf(int right) ;
static OpCodes *code_instanceof() ;
static OpCodes *code_assign(jsi_Pstate *p, jsi_Pline *line, int h) ;
static OpCodes *code_subscript(jsi_Pstate *p, jsi_Pline *line, int right_val) ;
static OpCodes *code_inc(jsi_Pstate *p, jsi_Pline *line, int e) ;
static OpCodes *code_dec(jsi_Pstate *p, jsi_Pline *line, int e) ;
static OpCodes *code_typeof(jsi_Pstate *p, jsi_Pline *line, int e) ;
static OpCodes *code_fcall(jsi_Pstate *p, jsi_Pline *line, int argc) ;
static OpCodes *code_newfcall(jsi_Pstate *p, jsi_Pline *line, int argc) ;
static OpCodes *code_ret(int n) ;
static OpCodes *code_delete(int n) ;
static OpCodes *code_chthis(int n) ;
static OpCodes *code_pop(int n) ;
static OpCodes *code_jfalse(int off) ;
static OpCodes *code_jtrue(int off) ;
static OpCodes *code_jfalse_np(int off) ;
static OpCodes *code_jtrue_np(int off) ;
static OpCodes *code_jmp(int off) ;
static OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, int c) ;
static OpCodes *code_array(jsi_Pstate *p, jsi_Pline *line, int c) ;
static OpCodes *code_key() ;
static OpCodes *code_next() ;
static OpCodes *code_eval(jsi_Pstate *p, jsi_Pline *line, int argc) ;
static OpCodes *code_stry(jsi_Pstate *p, jsi_Pline *line, int trylen, int catchlen, int finlen)
static OpCodes *code_etry(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_scatch(jsi_Pstate *p, jsi_Pline *line, const char *var) ;
static OpCodes *code_ecatch(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_sfinal(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_efinal(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_throw(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_with(jsi_Pstate *p, jsi_Pline *line, int withlen) ;
static OpCodes *code_ewith(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_debug(jsi_Pstate *p, jsi_Pline *line) ;
static OpCodes *code_reserved(jsi_Pstate *p, jsi_Pline *line, int type, char *id);
